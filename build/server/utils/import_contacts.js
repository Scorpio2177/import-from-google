// Generated by CoffeeScript 1.9.3
var CompareContacts, Contact, GoogleContactHelper, NotificationHelper, Tag, _, async, https, listContacts, localizationManager, log, notification, realtimer, url;

async = require('async');

realtimer = require('./realtimer');

log = require('printit')({
  date: true,
  prefix: 'utils:contact'
});

_ = require('lodash');

https = require('https');

url = require('url');

Contact = require('../models/contact');

Tag = require('../models/tag');

CompareContacts = require('../utils/compare_contacts');

GoogleContactHelper = require('../utils/google_contact_helper');

NotificationHelper = require('cozy-notifications-helper');

notification = new NotificationHelper('import-from-google');

localizationManager = require('./localization_manager');

listContacts = function(token, callback) {
  var opts, req;
  opts = {
    host: 'www.google.com',
    port: 443,
    path: '/m8/feeds/contacts/default/full?alt=json&max-results=10000',
    method: 'GET',
    headers: {
      'Authorization': 'Bearer ' + token,
      'GData-Version': '3.0'
    }
  };
  req = https.request(opts, function(res) {
    var data;
    data = [];
    res.on('error', callback);
    res.on('data', function(chunk) {
      return data.push(chunk);
    });
    return res.on('end', function() {
      var e, err, result;
      err = null;
      result = null;
      if (res.statusCode === 200) {
        try {
          result = JSON.parse(data.join('')).feed.entry;
        } catch (_error) {
          e = _error;
          err = e;
        }
      } else {
        err = new Error("Error " + res.statusCode);
      }
      return callback(err, result);
    });
  });
  req.on('error', callback);
  return req.end();
};

module.exports = function(token, callback) {
  log.debug('request contacts list');
  return async.parallel({
    google: function(cb) {
      return listContacts(token, cb);
    },
    cozyContacts: Contact.all,
    accountName: function(cb) {
      return GoogleContactHelper.fetchAccountName(token, cb);
    },
    tag: function(cb) {
      return Tag.getOrCreate({
        name: 'google',
        color: '#4285F4'
      }, cb);
    }
  }, function(err, contacts) {
    var numberProcessed, ref, ref1, total;
    log.debug("got " + (contacts != null ? (ref = contacts.google) != null ? ref.length : void 0 : void 0) + " contacts");
    if (err) {
      return callback(err);
    }
    contacts.ofAccountByIds = GoogleContactHelper.filterContactsOfAccountByIds(contacts.cozyContacts, contacts.accountName);
    numberProcessed = 0;
    total = (ref1 = contacts.google) != null ? ref1.length : void 0;
    return async.eachSeries(contacts.google, function(gContact, cb) {
      return GoogleContactHelper.updateCozyContact(gContact, contacts, contacts.accountName, token, function(err, updatedContact) {
        numberProcessed += 1;
        realtimer.sendContacts({
          number: numberProcessed,
          total: total
        });
        return setTimeout(function() {
          return cb(err, 1);
        });
      });
    }, function(err) {
      if (err) {
        return callback(err);
      }
      _ = localizationManager.t;
      notification.createOrUpdatePersistent("leave-google-contacts", {
        app: 'import-from-google',
        text: _('notif_import_contact', {
          total: total
        }),
        resource: {
          app: 'contacts',
          url: 'contacts/'
        }
      });
      return callback();
    });
  });
};
